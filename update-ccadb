#!/usr/bin/python3
# vim:set et sw=4:
#
# update-ccadb - download CCADB and apply to system trust

# Prints extraneous debuging info and sest DESTDIR to './dest' by default
debug = False

import datetime
import os
import re
import shutil
import ssl
import subprocess
import sys
import tempfile
import time
import urllib.request, urllib.parse, urllib.error

# Get DESTDIR value from environment if set
DESTDIR = os.getenv('DESTDIR')
if DESTDIR is None:
  DESTDIR = ''
  if debug == True:
    DESTDIR = './dest'

# Do not depend on path, provide them in the config file if not correct
OPENSSL = "/usr/bin/openssl"
SED     = "/usr/bin/sed" # May not be needed
TRUST   = "/usr/bin/trust"

# Destination configuration
CONFDIR    = "/etc/make-ca"
PKIDIR     = DESTDIR + "/etc/pki"
SSLDIR     = DESTDIR + "/etc/ssl"
ANCHORDIR  = PKIDIR + "/anchors"
ANCHORLIST = PKIDIR + "/anchors.md5sums"
BUNDLEDIR  = PKIDIR + "/tls/certs"
SABUNDLE   = BUNDLEDIR + "/ca-bundle.crt"
SMBUNDLE   = BUNDLEDIR + "/email-ca-bundle.crt"
CSBUNDLE   = BUNDLEDIR + "/objsign-ca-bundle.crt"
CERTDIR    = SSLDIR + "/certs"
JAVADIR    = PKIDIR + "/tls/java"
KEYSTORE   = JAVADIR + "/cacerts"
NSSDB      = PKIDIR + "/nssdb"
LOCALDIR   = SSLDIR + "/local"
MOZCA      = CONFDIR + "/mozilla-ca-root.pem"
CSURL = "https://ccadb-public.secure.force.com/microsoft/IncludedRootsPEMTxtForMSFT?MicrosoftEKUs=Code%20Signing"
SMURL = "https://ccadb-public.secure.force.com/mozilla/IncludedRootsPEMTxt?TrustBitsInclude=Email"
SAURL = "https://ccadb-public.secure.force.com/mozilla/IncludedRootsPEMTxt?TrustBitsInclude=Websites"

# Create a temporary working directory
TEMPDIR = tempfile.mkdtemp(prefix="tmp.ccadb.")

# Create default ssl context with MOZZILA_CA_ROOT as the only CA
context = ssl.create_default_context()
context.load_verify_locations(cafile=MOZCA)

# Get the current date/time
today = datetime.datetime.now()
certdate = today.strftime("%Y%m%d-%H%M")


def download_ccadb():
  print("Downloading updated CCADB files:")
  # Download server-auth certificates

  print("  Server Auth certificates...", end='')
  sadl    = urllib.request.urlopen(SAURL, data=None, context=context)
  safn    = TEMPDIR + "/sacrts.txt"
  sabytes = sadl.read()
  satext  = sabytes.decode('utf-8')
  safile  = open(safn, 'w')
  safile.write("# Date: " + certdate + "\n" + satext.replace("\r\n", "\n"))
  safile.close()
  print("done.")

  # Download server-auth certificates
  print("  S-Mime certificates...", end='')
  smdl    = urllib.request.urlopen(SMURL, data=None, context=context)
  smfn    = TEMPDIR + "/smcrts.txt"
  smbytes = smdl.read()
  smtext  = smbytes.decode('utf-8')
  smfile  = open(smfn, 'w')
  smfile.write("# Date: " + certdate + "\n" + smtext.replace("\r\n", "\n"))
  smfile.close()
  print("done.")

  # Download server-auth certificates
  print("  Code signing certificates...", end='')
  csdl    = urllib.request.urlopen(CSURL, data=None, context=context)
  csfn    = TEMPDIR + "/cscrts.txt"
  csbytes = csdl.read()
  cstext  = csbytes.decode('utf-8')
  csfile  = open(csfn, 'w')
  csfile.write("# Date: " + certdate + "\n" + cstext.replace("\r\n", "\n"))
  csfile.close()
  print("done.")

  return safn,smfn,csfn;

def get_cert_hash(filepath):
  gethash = [OPENSSL, "x509", "-hash", "-in", filepath, "-noout"]
  certhash = subprocess.check_output(gethash).decode('utf-8').strip()
  return certhash;

def dump_certs(certprefix, filepath): #certprefix = sa || sm || cs
  os.makedirs(TEMPDIR + "/" + certprefix, mode = 0o755, exist_ok = True)
  with open(filepath) as pem_file:
    pattern = r'-----BEGIN CERTIFICATE-----[^-]*-----END CERTIFICATE-----'
    pem_certs = re.findall(pattern, pem_file.read())
    for pem_cert in pem_certs:
      certtemp = tempfile.NamedTemporaryFile(delete=False, dir=(TEMPDIR + "/" + certprefix))
      writetemp = open(certtemp.name, 'w')
      writetemp.write(pem_cert)
      writetemp.close()
      chash = get_cert_hash(certtemp.name)
      os.rename(certtemp.name, TEMPDIR + "/" + certprefix + "/" + chash + ".pem")
  return 0;

def get_trust_value(trustlist):
  # Certs in CCADB will never be distrusted, but left for completeness
  if trust == 'distrusted':
    trust_ext_oid = "1.3.6.1.4.1.3319.6.10.1"
    trust_ext_value = "0.%06%0a%2b%06%01%04%01%99w%06%0a%01%04 0%1e%06%08%2b%06%01%05%05%07%03%04%06%08%2b%06%01%05%05%07%03%01%06%08%2b%06%01%05%05%07%03%03"
  else:
    trust_ext_oid = "2.5.29.37"
    if trust == 'satrust':
      trust_ext_value = "0%16%06%03U%1d%25%01%01%ff%04%0c0%0a%06%08%2b%06%01%05%05%07%03%01"
    if trust == 'satrust,smtrust':
      trust_ext_value = "0 %06%03U%1d%25%01%01%ff%04%160%14%06%08%2b%06%01%05%05%07%03%04%06%08%2b%06%01%05%05%07%03%01"
    if trust == 'satrust,cstrust':
      trust_ext_value = "0 %06%03U%1d%25%01%01%ff%04%160%14%06%08%2b%06%01%05%05%07%03%01%06%08%2b%06%01%05%05%07%03%03"
    if trust == 'satrust,smtrust,cstrust':
      trust_ext_value = "0%2a%06%03U%1d%25%01%01%ff%04 0%1e%06%08%2b%06%01%05%05%07%03%04%06%08%2b%06%01%05%05%07%03%01%06%08%2b%06%01%05%05%07%03%03"
    if trust == 'smtrust':
      trust_ext_value = "0%16%06%03U%1d%25%01%01%ff%04%0c0%0a%06%08%2b%06%01%05%05%07%03%04"
    if trust == 'smtrust,cstrust':
      trust_ext_value = "0 %06%03U%1d%25%01%01%ff%04%160%14%06%08%2b%06%01%05%05%07%03%04%06%08%2b%06%01%05%05%07%03%03"
    if trust == 'cstrust':
      trust_ext_value = "0%16%06%03U%1d%25%01%01%ff%04%0c0%0a%06%08%2b%06%01%05%05%07%03%03"
    if trust == '':
      trust_ext_value = "0%18%06%03U%1d%25%01%01%ff%04%0e0%0c%06%0a%2b%06%01%04%01%99w%06%0a%10"
  return trust_ext_oid,trust_ext_value;

def get_p11_label(srcpem):
  ostcmd = [OPENSSL, "x509", "-in", srcpem, "--noout", "-text"]
  openssl_text = subprocess.check_output(ostcmd).decode('utf-8').strip()
  # Note: When using CCADB, there is no CKA_LABEL available
  # label can be taken from the Subject line using CN, OU, or O (in that order)
  for line in openssl_text.split("\n"):
    if "Subject:" in line:
      subject_line = line.strip().replace(" = ", "=")
  if "CN" in subject_line:
    labelrex = re.search(r"CN=.*", subject_line)
    label = labelrex.group(0).replace("CN=", "")
  elif "OU" in subject_line:
    labelrex = re.search(r"OU=.*", subject_line)
    label = re.sub(",.*$", "", labelrex.group(0).replace("OU=", ""))
  elif "O" in subject_line:
    labelrex = re.search(r"O=.*", subject_line)
    label = re.sub(",.*$", "", labelrex.group(0).replace("O=", ""))
  return label;

def write_p11_file(srcpem,trust_oid,trust_value,trust):
  os.makedirs(TEMPDIR + "/anchors", mode = 0o755, exist_ok = True)
  ostcmd = [OPENSSL, "x509", "-in", srcpem, "--noout", "-text"]
  openssl_text = subprocess.check_output(ostcmd).decode('utf-8').strip()
  oskcmd = [OPENSSL, "x509", "-in", srcpem, "-noout", "-pubkey"]
  openssl_key = subprocess.check_output(oskcmd).decode('utf-8').strip()
  keyhash = get_cert_hash(srcpem)
  filepath = ANCHORDIR + "/" + keyhash + ".p11-kit"
  label = get_p11_label(srcpem)
  with open(srcpem, 'r') as file:
    srcpem_text = file.read()
  print("\nWriting anchor: %s\n  Label: %s\n  Keyhash: %s\n  Trust: %s\n" % (filepath, label, keyhash, trust.replace("satrust", "Server Auth").replace("smtrust", "E-mail").replace("cstrust", "Code Signing").replace(",", ", ")))
  writep11 = open(filepath, 'w')
  writep11.write("[p11-kit-object-v1]\n")
  writep11.write("label: \"" + label + "\"\n")
  writep11.write("class: x-certificate-extension\n")
  writep11.write("object-id: " + trust_oid + "\n")
  writep11.write("value: \"" + trust_value + "\"\n")
  writep11.write("modifiable: false\n")
  writep11.write(openssl_key + "\n\n")
  writep11.write("[p11-kit-object-v1]\n")
  writep11.write("label: \"" + label + "\"\n")
  # Note: always trusted using CCADB
  writep11.write("trusted: true\n")
  # Note: nss-mozilla-ca-policy is always true with CCADB
  writep11.write("nss-mozilla-ca-policy: true\n")
  writep11.write("modifiable: false\n")
  # Note: There are no "nss-{server,email}-distrust-after" values if using CCADB
  #       so just set to never distrust (will need to update frequently)
  writep11.write("nss-server-distrust-after: \"%00\"\n")
  writep11.write("nss-email-distrust-after: \"%00\"\n")
  writep11.write(srcpem_text + "\n")
  writep11.write(re.sub(r"\n", "\n#", (re.sub(r"^", '#', openssl_text))) + "\n")
  return 0;

if debug == True:
  print("Temporary directory is: %s" % (TEMPDIR))
safile,smfile,csfile = download_ccadb()

# Extract individual certificates
dump_certs('sa', safile)
dump_certs('sm', smfile)
dump_certs('cs', csfile)

# Create target directories
os.makedirs(ANCHORDIR, mode = 0o755, exist_ok = True)
os.makedirs(BUNDLEDIR, mode = 0o755, exist_ok = True)
os.makedirs(CERTDIR, mode = 0o755, exist_ok = True)
os.makedirs(KEYSTORE, mode = 0o755, exist_ok = True)
os.makedirs(NSSDB, mode = 0o755, exist_ok = True)
os.makedirs(LOCALDIR, mode = 0o755, exist_ok = True)

# Before we populate it, we need to clear out ANCHORDIR
for p11file in os.listdir(ANCHORDIR):
  if debug == True:
    print("Checking file: %s" % (os.path.join(ANCHORDIR, p11file)))
  if p11file.endswith(".p11-kit"):
    os.remove(os.path.join(ANCHORDIR, p11file))

# For each certificate in each of the three stores
# mate to other trusts and create p11-kit files
sadir = r'' + TEMPDIR + "/sa"
for pem in os.scandir(sadir):
  trust = 'satrust'
  if os.path.exists(TEMPDIR + "/sm/" + os.path.basename(pem)):
    trust += ',smtrust'
  if os.path.exists(TEMPDIR + "/cs/" + os.path.basename(pem)):
    trust += ',cstrust'
  trust_oid,trust_value = get_trust_value(trust)
  write_p11_file(pem,trust_oid,trust_value,trust)

smdir = r'' + TEMPDIR + "/sm"
for pem in os.scandir(smdir):
  trust = 'smtrust'
  if os.path.exists(TEMPDIR + "/sa/" + os.path.basename(pem)):
    trust = 'satrust,' + trust
  if os.path.exists(TEMPDIR + "/cs/" + os.path.basename(pem)):
    trust += ',cstrust'
  trust_oid,trust_value = get_trust_value(trust)
  keyhash = os.path.basename(pem).replace('.pem', '')
  if not os.path.exists(ANCHORDIR + "/" + keyhash + ".p11-kit"):
    write_p11_file(pem,trust_oid,trust_value,trust)

csdir = r'' + TEMPDIR + "/cs"
for pem in os.scandir(smdir):
  trust = 'cstrust'
  if os.path.exists(TEMPDIR + "/sm/" + os.path.basename(pem)):
    trust = 'smtrust,' + trust
  if os.path.exists(TEMPDIR + "/sa/" + os.path.basename(pem)):
    trust = 'satrust,' + trust
  trust_oid,trust_value = get_trust_value(trust)
  if not os.path.exists(ANCHORDIR + "/" + keyhash + ".p11-kit"):
    write_p11_file(pem,trust_oid,trust_value,trust)

# Process any local pem files
for pem in os.scandir(LOCALDIR):
  # provide a warning for files that end specifically with .pem
  if pem.name.endswith(".pem"):
    print("\n\033[93mWarning\033[0m: PEM format files are no longer supported in %s!" % (LOCALDIR))
    print("Skipping %s!" % (pem.name))
    print("Please convert the file to P11-Kit format using the \033[94madd-local-trust\033[0m utility.\n")
  if pem.name.endswith(".p11-kit"):
    print("\nCopying local trust file %s to the trust store." % (pem.name))
    shutil.copyfile(pem, ANCHORDIR + os.path.basename(pem))
  elif not pem.name.endswith(".pem"):
    print("\n\033[91mError\033[0m: Only P11-Kit format files are supported!")
    print("Skipping %s!" % (pem.name))

# Only create the bundles if on a real system, else the generated files
# will use the real trust directory, not our newly created one
if DESTDIR == '':
  # Create OpenSSL trust store
  print("Extracting OpenSSL certificates to:\n%s..." % (CERTDIR), end='')
  create_OTS = [TRUST, "extract", "--filter=ca-anchors", "--format=openssl-directory", "--overwrite", "--comment", CERTDIR]
  subprocess.run(create_OTS, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
  print("Done!")

  # Create GNUTLS bundle file
  print("Extracting GNUTLS server auth certificates to:\n%s..." % (CABUNDLE), end='')
  create_GBF = [TRUST, "extract", "--filter=ca-anchors", "--format=pem-bundle", "--purpose", "server-auth", "--overwrite", "--comment", CABUNDLE]
  subprocess.run(create_GBF, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
  print("Done!")

  # Create GNUTLS S-Mime bundle
  print("Extracting GNUTLS S-Mime certificates to:\n%s..." % (SMBUNDLE), end='')
  create_GSM = [TRUST, "extract", "--filter=ca-anchors", "--format=pem-bundle", "--purpose", "email", "--overwrite", "--comment", SMBUNDLE]
  subprocess.run(create_GSM, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
  print("Done!")

  # Create GNUTLS Code Signing bundle
  print("Extracting GNUTLS code signing certificates to:\n%s..." % (CSBUNDLE), end='')
  create_GCS = [TRUST, "extract", "--filter=ca-anchors", "--format=pem-bundle", "--purpose", "code-signing", "--overwrite", "--comment", CSBUNDLE]
  subprocess.run(create_GCS, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
  print("Done!")

  # Create Java certificate store
  print("Extracting Java cacerts (JKS) to:\n%s..." % (KEYSTORE), end='')
  create_JKS = [TRUST, "extract", "--filter=ca-anchors", "--format=java-cacerts", "--purpose", "server-auth", "--overwrite", "--comment", KEYSTORE]
  subprocess.run(create_JKS, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
  print("Done!")

else:
  print("\n\033[93mWarning\033[0m: Not updating 3rd party bundles when DESTDIR is not empty.\n")

if debug == False:
  # Clean up the temp directory
  shutil.rmtree(TEMPDIR)


